@using MessengerNetSix.Models
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager NavigationManager
@implements IAsyncDisposable

<h1>@DisplayName</h1>
<hr />
<div >
<ul id="messagesList">
    <table id="round">
        <tr><th></th><th></th></tr>
    @{int i = 0;}
    @foreach (var message in messages)
    {
                i++;
                if (i == messages.Count())
                {
                    if (message.SenderId == Sender)
            {
                <tr><td></td><td></td><td rowspan="2" class="new-message" style="background-color: #dbdbe1; color: #3b3b3f">@message.Content <br>@message.PostingDate</td></tr>
                <tr><td></td><td></td></tr><div class="pointer-right"></div>
                
            }
            else
            {
                <tr><td rowspan="2" class="new-message" style="background-color: #7c7fc1; color: #f2f2f5">@message.SenderId: @message.Content <br>@message.PostingDate</td><td></td><td></td></tr>
                <tr><td></td><td></td></tr><div class="pointer-left"></div>
            }
                }
                else
                {
                    if (message.SenderId == Sender)
            {
                <tr><td></td><td></td><td rowspan="2" style="background-color: #dbdbe1; color: #3b3b3f">@message.Content <br>@message.PostingDate</td></tr>
                <tr><td></td><td></td></tr><div class="pointer-right"></div>
                
            }
            else
            {
                <tr><td rowspan="2" style="background-color: #7c7fc1; color: #f2f2f5">@message.SenderId: @message.Content <br>@message.PostingDate</td><td></td><td></td></tr>
                <tr><td></td><td></td></tr><div class="pointer-left"></div>
            }
                }
                
            @*<li>@message</li>*@
    }
    </table>
</ul>
</div>
<hr>
<div class="form-group">
    <label>
        Message:
        <input @bind="messageInput" size="50" />
    </label>
</div>
<button @onclick="Send" disabled="@(!IsConnected)">Send</button>
@code {
    private HubConnection? hubConnection;
    //private List<string[]> messages = new List<string[]>();
    private string? userInput;
    private string? messageInput;

    [Parameter]
    public string Sender { get; set; }
    [Parameter]
    public string Connection { get; set; }
    [Parameter]
    public string DisplayName { get; set; }
    [Parameter]
    public List<Message> messages { get; set; }

    protected override async Task OnInitializedAsync()
    {


        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/messengerhub"))
            .Build();

        hubConnection.On<Message>("ReceiveMessage", (message) =>
        {
            //var encodedMsg = $"{user}: {message}";
            messages.Add(message);
            //messages.Add(encodedMsg);
            InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();
        await hubConnection.SendAsync("RegisterUser", Connection);
    }

    private async Task Send()
    {
        if (hubConnection is not null)
        {
            Message message = new Message { SenderId=Sender, Content=messageInput, ChatId = Connection, PostingDate=DateTime.Now};
            await hubConnection.SendAsync("SendGroupMessage", message);
        }
    }

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}
<style>
  #test {
    width:100%;
    height:100%;
  }
  table {
    margin: 0 auto; /* or margin: 0 auto 0 auto */
    width: 80%;
    border-spacing: 10px;
    border-collapse: separate;
  }
  td {
      /*display: inline-block; /* this has been added */
      border-radius: 10px;
      max-width: 40px;
      padding: 10px;
  }
  #round {
        background-color: #202029;
        border: 1px solid #000;
        -moz-border-radius: 10px;
        -webkit-border-radius: 10px;
        border-radius: 10px;
  }
  .pointer-left {
    background-color: #7c7fc1;
	height: 20px;
	width: 20px;
	margin: 0 auto;
	transform: rotate(45deg);
	border-radius: 0 0 12px 0;
	margin-top: -20px;
	position: relative;
	left: calc(0.5vw - 150px);
    }
   .pointer-right {
    background-color: #dbdbe1;
	height: 20px;
	width: 20px;
	margin: 0 auto;
	transform: rotate(45deg);
	border-radius: 0 0 12px 0;
	margin-top: -20px;
	position: relative;
	left: calc(0.5vw + 725px);
    }
    
</style>
